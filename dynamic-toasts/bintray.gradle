/*
 * Copyright 2017-2021 Pranav Pandey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = mavenGroup
version = mavenVersion

// Android libraries
if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        archiveClassifier.set("sources")
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

        failOnError = false
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Maven
publishing {
    publications {
        library(MavenPublication) {
            groupId mavenGroup
            artifactId mavenArtifactId
            version mavenVersion

            artifact "$buildDir/outputs/aar/$mavenArtifactId-release.aar"
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                // Project
                asNode().appendNode('name', projectName)
                asNode().appendNode('description', projectDesc)
                asNode().appendNode('url', siteUrl)
                asNode().appendNode('inceptionYear', mavenInceptionYear)

                // Licenses
                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', licenseName)
                license.appendNode('url', licenseUrl)
                license.appendNode('distribution', licenseDistribution)

                // Developers
                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('id', developerId)
                developer.appendNode('name', developerName)
                developer.appendNode('email', developerEmail)

                // SCM
                def scm = asNode().appendNode('scm')
                scm.appendNode('connection', "${gitUrl}.git")
                scm.appendNode('developerConnection', gitUrl)
                scm.appendNode('url', siteUrl)

                // Dependencies
                def dependenciesNode = asNode()['dependencies'][0]
                if (dependenciesNode == null) {
                    dependenciesNode = asNode().appendNode('dependencies')
                }

                // Add all that are 'compile'
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.key")

    filesSpec {
        from "$buildDir/publications/library/pom-default.xml"
        into "$mavenDir/$mavenArtifactId/$mavenVersion/"
        rename { String fileName ->
            "${mavenArtifactId}-${mavenVersion}.pom"
        }
    }

    configurations = ['archives']

    pkg {
        repo = mavenRepo
        name = mavenArtifactId
        desc = projectDesc
        websiteUrl = siteUrl
        vcsUrl = "${gitUrl}.git"
        issueTrackerUrl = issueUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true

        githubRepo = githubUrl

        version {
            name = mavenVersion
            desc = versionDesc
            released = new Date()

            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.passphrase")
            }
        }
    }
}

afterEvaluate { project ->
    // Fix javadoc generation
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })

    def pomTask = "generatePomFileForLibraryPublication"

    // Convenience task to prepare everything we need for releases
    task prepareArtifacts(dependsOn: [javadocJar, sourcesJar, assembleRelease, pomTask]) { }
}
